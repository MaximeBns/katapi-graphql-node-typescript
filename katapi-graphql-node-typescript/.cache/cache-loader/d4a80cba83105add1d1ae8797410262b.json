{"remainingRequest":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/node_modules/ts-loader/index.js??ref--10-1!/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/src/server.ts","dependencies":[{"path":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/src/server.ts","mtime":1627655504700},{"path":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/node_modules/cache-loader/dist/cjs.js","mtime":1627655537042},{"path":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/node_modules/ts-loader/index.js","mtime":1627655538045}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _this = this;\nimport { ApolloServer } from 'apollo-server-express';\nimport * as GraphiQL from 'apollo-server-module-graphiql';\nimport * as cors from 'cors';\nimport * as express from 'express';\nimport schema from './schema';\nimport { execute, subscribe } from 'graphql';\nimport { createServer } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport * as url from 'url';\nfunction graphiqlExpress(options) {\n    var graphiqlHandler = function (req, res, next) {\n        var query = req.url && url.parse(req.url, true).query;\n        GraphiQL.resolveGraphiQLString(query, options, req).then(function (graphiqlString) {\n            res.setHeader('Content-Type', 'text/html');\n            res.write(graphiqlString);\n            res.end();\n        }, function (error) { return next(error); });\n    };\n    return graphiqlHandler;\n}\nexport default (function (port) { return __awaiter(_this, void 0, Promise, function () {\n    var app, server, apolloServer;\n    return __generator(this, function (_a) {\n        app = express();\n        server = createServer(app);\n        app.use('*', cors({ origin: 'http://localhost:3000' }));\n        apolloServer = new ApolloServer({\n            playground: false,\n            schema: schema\n        });\n        apolloServer.applyMiddleware({ app: app, path: '/graphql' });\n        if (module.hot) {\n            app.use('/graphiql', graphiqlExpress({\n                endpointURL: '/graphql',\n                query: '# Welcome to your own GraphQL server!\\n#\\n' +\n                    '# Press Play button above to execute GraphQL query\\n#\\n' +\n                    '# You can start editing source code and see results immediately\\n\\n' +\n                    'query hello($subject:String) {\\n  hello(subject: $subject)\\n}',\n                subscriptionsEndpoint: \"ws://localhost:\" + port + \"/subscriptions\",\n                variables: { subject: 'World' }\n            }));\n        }\n        return [2, new Promise(function (resolve) {\n                server.listen(port, function () {\n                    new SubscriptionServer({\n                        execute: execute,\n                        schema: schema,\n                        subscribe: subscribe\n                    }, {\n                        path: '/subscriptions',\n                        server: server\n                    });\n                    resolve(server);\n                });\n            })];\n    });\n}); });\n",{"version":3,"file":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/src/server.ts","sourceRoot":"","sources":["/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/src/server.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBA8EA;AA9EA,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACrD,OAAO,KAAK,QAAQ,MAAM,+BAA+B,CAAC;AAC1D,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AAEnC,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAU,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;AAChE,OAAO,KAAK,GAAG,MAAM,KAAK,CAAC;AAI3B,SAAS,eAAe,CAAC,OAA8D;IACrF,IAAM,eAAe,GAAG,UAAC,GAAoB,EAAE,GAAqB,EAAE,IAAS;QAC7E,IAAM,KAAK,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC;QACxD,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,CACtD,UAAC,cAAmB;YAClB,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YAC3C,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC1B,GAAG,CAAC,GAAG,EAAE,CAAC;QACZ,CAAC,EACD,UAAC,KAAU,IAAK,OAAA,IAAI,CAAC,KAAK,CAAC,EAAX,CAAW,CAC5B,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,gBAAe,UAAO,IAAY,oCAAG,OAAO;;;QACpC,GAAG,GAAG,OAAO,EAAE,CAAC;QAEhB,MAAM,GAAW,YAAY,CAAC,GAAG,CAAC,CAAC;QAEzC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,uBAAuB,EAAE,CAAC,CAAC,CAAC;QAElD,YAAY,GAAG,IAAI,YAAY,CAAC;YACpC,UAAU,EAAE,KAAK;YACjB,MAAM,QAAA;SACP,CAAC,CAAC;QAEH,YAAY,CAAC,eAAe,CAAC,EAAE,GAAG,KAAA,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QAExD,IAAI,MAAM,CAAC,GAAG,EAAE;YACd,GAAG,CAAC,GAAG,CACL,WAAW,EACX,eAAe,CAAC;gBACd,WAAW,EAAE,UAAU;gBACvB,KAAK,EACH,4CAA4C;oBAC5C,yDAAyD;oBACzD,qEAAqE;oBACrE,+DAA+D;gBACjE,qBAAqB,EAAE,oBAAkB,IAAI,mBAAgB;gBAC7D,SAAS,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE;aAChC,CAAC,CACH,CAAC;SACH;QAED,WAAO,IAAI,OAAO,CAAS,UAAA,OAAO;gBAChC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;oBAElB,IAAI,kBAAkB,CACpB;wBACE,OAAO,SAAA;wBACP,MAAM,QAAA;wBACN,SAAS,WAAA;qBACV,EACD;wBACE,IAAI,EAAE,gBAAgB;wBACtB,MAAM,QAAA;qBACP,CACF,CAAC;oBACF,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,EAAC;;KACJ,EAAC","sourcesContent":["import { ApolloServer } from 'apollo-server-express';\nimport * as GraphiQL from 'apollo-server-module-graphiql';\nimport * as cors from 'cors';\nimport * as express from 'express';\n\nimport schema from './schema';\n\nimport { execute, subscribe } from 'graphql';\nimport { createServer, Server } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport * as url from 'url';\n\ntype ExpressGraphQLOptionsFunction = (req?: express.Request, res?: express.Response) => any | Promise<any>;\n\nfunction graphiqlExpress(options: GraphiQL.GraphiQLData | ExpressGraphQLOptionsFunction) {\n  const graphiqlHandler = (req: express.Request, res: express.Response, next: any) => {\n    const query = req.url && url.parse(req.url, true).query;\n    GraphiQL.resolveGraphiQLString(query, options, req).then(\n      (graphiqlString: any) => {\n        res.setHeader('Content-Type', 'text/html');\n        res.write(graphiqlString);\n        res.end();\n      },\n      (error: any) => next(error)\n    );\n  };\n\n  return graphiqlHandler;\n}\n\nexport default async (port: number): Promise<Server> => {\n  const app = express();\n\n  const server: Server = createServer(app);\n\n  app.use('*', cors({ origin: 'http://localhost:3000' }));\n\n  const apolloServer = new ApolloServer({\n    playground: false,\n    schema\n  });\n\n  apolloServer.applyMiddleware({ app, path: '/graphql' });\n\n  if (module.hot) {\n    app.use(\n      '/graphiql',\n      graphiqlExpress({\n        endpointURL: '/graphql',\n        query:\n          '# Welcome to your own GraphQL server!\\n#\\n' +\n          '# Press Play button above to execute GraphQL query\\n#\\n' +\n          '# You can start editing source code and see results immediately\\n\\n' +\n          'query hello($subject:String) {\\n  hello(subject: $subject)\\n}',\n        subscriptionsEndpoint: `ws://localhost:${port}/subscriptions`,\n        variables: { subject: 'World' }\n      })\n    );\n  }\n\n  return new Promise<Server>(resolve => {\n    server.listen(port, () => {\n      // tslint:disable-next-line\n      new SubscriptionServer(\n        {\n          execute,\n          schema,\n          subscribe\n        },\n        {\n          path: '/subscriptions',\n          server\n        }\n      );\n      resolve(server);\n    });\n  });\n};\n"]}]}