{"remainingRequest":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/node_modules/ts-loader/index.js??ref--10-1!/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/src/index.ts","dependencies":[{"path":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/src/index.ts","mtime":1627655504695},{"path":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/node_modules/cache-loader/dist/cjs.js","mtime":1627655537042},{"path":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/node_modules/ts-loader/index.js","mtime":1627655538045}],"contextDependencies":[],"result":["import opn from 'opn';\nimport startServer from './server';\ntry {\n    var PORT_1 = 8080;\n    var server_1;\n    if (module.hot) {\n        module.hot.accept();\n        module.hot.dispose(function (data) {\n            if (server_1) {\n                server_1.close();\n            }\n            data.hotReloaded = true;\n        });\n        module.hot.addStatusHandler(function (status) {\n            if (status === 'fail') {\n                process.exit(250);\n            }\n        });\n    }\n    var firstStartInDevMode_1 = module.hot && process.env.LAST_EXIT_CODE === '0' && (!module.hot.data || !module.hot.data.hotReloaded);\n    startServer(PORT_1).then(function (serverInstance) {\n        if (!module.hot || firstStartInDevMode_1) {\n            console.log(\"GraphQL Server is now running on http://localhost:\" + PORT_1);\n            if (firstStartInDevMode_1) {\n                opn(\"http://localhost:\" + PORT_1 + \"/api/swagger\");\n            }\n        }\n        server_1 = serverInstance;\n    });\n}\ncatch (e) {\n    console.error(e);\n    process.exit(1);\n}\n",{"version":3,"file":"/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/src/index.ts","sourceRoot":"","sources":["/Users/maxime.bienassis/WebstormProjects/katapi-graphql-node-typescript/katapi-graphql-node-typescript/src/index.ts"],"names":[],"mappings":"AACA,OAAO,GAAG,MAAM,KAAK,CAAC;AAEtB,OAAO,WAAW,MAAM,UAAU,CAAC;AAEnC,IAAI;IACF,IAAM,MAAI,GAAG,IAAI,CAAC;IAElB,IAAI,QAAc,CAAC;IAEnB,IAAI,MAAM,CAAC,GAAG,EAAE;QACd,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;QACpB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,UAAA,IAAI;YACrB,IAAI,QAAM,EAAE;gBACV,QAAM,CAAC,KAAK,EAAE,CAAC;aAChB;YACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,UAAA,MAAM;YAChC,IAAI,MAAM,KAAK,MAAM,EAAE;gBACrB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;KACJ;IAED,IAAM,qBAAmB,GACvB,MAAM,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAEzG,WAAW,CAAC,MAAI,CAAC,CAAC,IAAI,CAAC,UAAA,cAAc;QACnC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,qBAAmB,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,uDAAqD,MAAM,CAAC,CAAC;YACzE,IAAI,qBAAmB,EAAE;gBACvB,GAAG,CAAC,sBAAoB,MAAI,iBAAc,CAAC,CAAC;aAC7C;SACF;QAED,QAAM,GAAG,cAAc,CAAC;IAC1B,CAAC,CAAC,CAAC;CACJ;AAAC,OAAO,CAAC,EAAE;IACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB","sourcesContent":["import { Server } from 'http';\nimport opn from 'opn';\n\nimport startServer from './server';\n\ntry {\n  const PORT = 8080;\n\n  let server: Server;\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(data => {\n      if (server) {\n        server.close();\n      }\n      data.hotReloaded = true;\n    });\n    module.hot.addStatusHandler(status => {\n      if (status === 'fail') {\n        process.exit(250);\n      }\n    });\n  }\n\n  const firstStartInDevMode =\n    module.hot && process.env.LAST_EXIT_CODE === '0' && (!module.hot.data || !module.hot.data.hotReloaded);\n\n  startServer(PORT).then(serverInstance => {\n    if (!module.hot || firstStartInDevMode) {\n      console.log(`GraphQL Server is now running on http://localhost:${PORT}`);\n      if (firstStartInDevMode) {\n        opn(`http://localhost:${PORT}/api/swagger`);\n      }\n    }\n\n    server = serverInstance;\n  });\n} catch (e) {\n  console.error(e);\n  process.exit(1);\n}\n"]}]}