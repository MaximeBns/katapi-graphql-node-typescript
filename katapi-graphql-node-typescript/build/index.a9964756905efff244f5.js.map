{"version":3,"file":"index.324ef1289fdfb1615f34.hot-update.js","sources":["../src/application/resolvers.ts","../src/application/schema.graphql","../src/application/schema.ts","../src/server.ts","../external \"graphql-tools\""],"sourcesContent":["interface Subject {\n subject: string\n}\n\nexport default {\n  Query: {\n    hello(obj: any, subject :Subject ) {\n      return `Hello, ${subject}! from Server`;\n    }\n  }\n};\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Query\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"hello\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"subject\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":48}};\n    doc.loc.source = {\"body\":\"type Query {\\n  hello(subject: String): String\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n","import { makeExecutableSchema } from 'graphql-tools';\nimport resolvers from './resolvers';\nimport * as typeDefs from './schema.graphql';\n\nconst executableSchema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\n\nexport default executableSchema;\n","import { ApolloServer } from 'apollo-server-express';\nimport * as GraphiQL from 'apollo-server-module-graphiql';\nimport * as cors from 'cors';\nimport * as express from 'express';\n\nimport schema from './application/schema';\n\nimport { execute, subscribe } from 'graphql';\nimport { createServer, Server } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport * as url from 'url';\n\ntype ExpressGraphQLOptionsFunction = (req?: express.Request, res?: express.Response) => any | Promise<any>;\n\nfunction graphiqlExpress(options: GraphiQL.GraphiQLData | ExpressGraphQLOptionsFunction) {\n  const graphiqlHandler = (req: express.Request, res: express.Response, next: any) => {\n    const query = req.url && url.parse(req.url, true).query;\n    GraphiQL.resolveGraphiQLString(query, options, req).then(\n      (graphiqlString: any) => {\n        res.setHeader('Content-Type', 'text/html');\n        res.write(graphiqlString);\n        res.end();\n      },\n      (error: any) => next(error)\n    );\n  };\n\n  return graphiqlHandler;\n}\n\nexport default async (port: number): Promise<Server> => {\n  const app = express();\n\n  const server: Server = createServer(app);\n\n  app.use('*', cors({ origin: 'http://localhost:3000' }));\n\n  const apolloServer = new ApolloServer({\n    playground: false,\n    schema\n  });\n\n  apolloServer.applyMiddleware({ app, path: '/graphql' });\n\n  if (module.hot) {\n    app.use(\n      '/graphiql',\n      graphiqlExpress({\n        endpointURL: '/graphql',\n        query:\n          '# Welcome to your own GraphQL server!\\n#\\n' +\n          '# Press Play button above to execute GraphQL query\\n#\\n' +\n          '# You can start editing source code and see results immediately\\n\\n' +\n          'query hello($subject:String) {\\n  hello(subject: $subject)\\n}',\n        subscriptionsEndpoint: `ws://localhost:${port}/subscriptions`,\n        variables: { subject: 'World' }\n      })\n    );\n  }\n\n  return new Promise<Server>(resolve => {\n    server.listen(port, () => {\n      // tslint:disable-next-line\n      new SubscriptionServer(\n        {\n          execute,\n          schema,\n          subscribe\n        },\n        {\n          path: '/subscriptions',\n          server\n        }\n      );\n      resolve(server);\n    });\n  });\n};\n","module.exports = require(\"graphql-tools\");"],"mappings":";;;;;;;;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;;;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;;;;;;;;AC7EA;;;;A","sourceRoot":""}