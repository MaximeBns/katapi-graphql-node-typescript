{"version":3,"file":"index.82bd82c99bbeaa6bd85b.hot-update.js","sources":["../src/server.ts"],"sourcesContent":["import { ApolloServer } from 'apollo-server-express';\nimport * as GraphiQL from 'apollo-server-module-graphiql';\nimport * as cors from 'cors';\nimport * as express from 'express';\n\nimport schema from './schema';\n\nimport { execute, subscribe } from 'graphql';\nimport { createServer, Server } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport * as url from 'url';\n\ntype ExpressGraphQLOptionsFunction = (req?: express.Request, res?: express.Response) => any | Promise<any>;\n\nfunction graphiqlExpress(options: GraphiQL.GraphiQLData | ExpressGraphQLOptionsFunction) {\n  const graphiqlHandler = (req: express.Request, res: express.Response, next: any) => {\n    const query = req.url && url.parse(req.url, true).query;\n    GraphiQL.resolveGraphiQLString(query, options, req).then(\n      (graphiqlString: any) => {\n        res.setHeader('Content-Type', 'text/html');\n        res.write(graphiqlString);\n        res.end();\n      },\n      (error: any) => next(error)\n    );\n  };\n\n  return graphiqlHandler;\n}\n\nexport default async (port: number): Promise<Server> => {\n  const app = express();\n\n  const server: Server = createServer(app);\n\n  app.use('*', cors({ origin: 'http://localhost:3000' }));\n\n  const apolloServer = new ApolloServer({\n    playground: false,\n    schema\n  });\n\n  apolloServer.applyMiddleware({ app, path: '/graphql' });\n\n  if (module.hot) {\n    app.use(\n      '/graphiql',\n      graphiqlExpress({\n        endpointURL: '/graphql',\n        query:\n          '# Welcome to your own GraphQL server!\\n#\\n' +\n          '# Press Play button above to execute GraphQL query\\n#\\n' +\n          '# You can start editing source code and see results immediately\\n\\n' +\n          'query hello($subject:String) {\\n  hello(subject: $subject)\\n}',\n        subscriptionsEndpoint: `ws://localhost:${port}/subscriptions`,\n        variables: { subject: 'World' }\n      })\n    );\n  }\n\n  return new Promise<Server>(resolve => {\n    server.listen(port, () => {\n      // tslint:disable-next-line\n      new SubscriptionServer(\n        {\n          execute,\n          schema,\n          subscribe\n        },\n        {\n          path: '/subscriptions',\n          server\n        }\n      );\n      resolve(server);\n    });\n  });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;;;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;;;;;;;;A","sourceRoot":""}