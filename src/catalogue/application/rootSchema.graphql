type Query {
    recupererLesProduits(filter: ProduitFilter): ResultatListeDeProduit
    recupererLeProduit(id:String!): ResultatProduit
}

type Mutation {
    sauvegarderProduit(produit: ProduitInput): Produit
}

union ResultatListeDeProduit = ListeDeProduits | InternalServerError | BadRequestError | NotFoundError

union ResultatProduit = Produit | ProduitNonTrouve

input ProduitInput {
    nom: String!
    prix: Float!
    poids: Float!
}

type ListeDeProduits {
    produits: [Produit]!
}

type ProduitNonTrouve {
    id: String!
    message: String
}

type Produit {
    id: String!
    nom: String!
    prix: Float!
    poids: Float!
}

input ProduitFilter {
    by: String! = "name"
    order: OrderType! = "ASC"
    compare: Compare
    contains: String
    limit: Int
}

interface Error {
    code: Int!
    message: String!
}

type BadRequestError implements Error{
    code: Int!
    message: String!
}

type InternalServerError implements Error{
    code: Int!
    message: String!
}

type NotFoundError implements Error{
    code: Int!
    message: String!
}

input Compare {
    sign: Sign!
    than: Float!
}

enum Sign {
    GREATER
    LOWER
    LOWER_THAN_OR_EQUAL
    GREATER_THAN_OR_EQUAL_TO
}

enum OrderType {
    ASC
    DESC
}



