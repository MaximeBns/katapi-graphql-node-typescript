type Query {
    recupererLesProduits(filter: ProduitFilter): ResultatListeDeProduit
    recupererLeProduit(id:String!): ResultatProduit
    recupererLesCommandes: ResultatListeCommande
    recupererLaCommande(id: String!): ResultatCommande
}

type Mutation {
    sauvegarderProduit(produit: ProduitInput): Produit
    sauvegarderCommande(commande: CommandeInput): Commande
}

union ResultatListeDeProduit = ListeDeProduits | InternalServerError | BadRequestError | NotFoundError

union ResultatProduit = Produit | ProduitNonTrouve

input ProduitInput {
    nom: String!
    prix: Float!
    poids: Float!
}

input CommandeInput {
    elements: [ElementCommandeInput]!
}

input ElementCommandeInput {
    idProduit: String!
    quantite: Int!
}

type ListeDeProduits {
    produits: [Produit]!
}

type ListeCommande {
    commandes: [Commande]
}

union ResultatListeProduit = ListeDeProduits | ProduitNonTrouve
union ResultatProduit = Produit | ProduitNonTrouve
union ResultatListeCommande = ListeCommande | CommandeNonTrouvee
union ResultatCommande = Commande | CommandeNonTrouvee

type ProduitNonTrouve {
    id: String!
    message: String
}

type CommandeNonTrouvee {
    id: String!
    message: String
}

type Produit {
    id: String!
    nom: String!
    prix: Float!
    poids: Float!
}

type Commande {
    id: String!
    statut: StatutDemande!
    elements: [ElementCommande]!
    fraisDePort: Float!
    montantTotal: Float!
    poids: Float!
}

enum StatutDemande {
    EN_COURS
    PAYEE
    ANNULEE
}

type ElementCommande {
    produit: ResultatProduit!
    quantite: Int!
}




input ProduitFilter {
    by: String! = "name"
    order: OrderType! = "ASC"
    compare: Compare
    contains: String
    limit: Int
}

interface Error {
    code: Int!
    message: String!
}

type BadRequestError implements Error{
    code: Int!
    message: String!
}

type InternalServerError implements Error{
    code: Int!
    message: String!
}

type NotFoundError implements Error{
    code: Int!
    message: String!
}

input Compare {
    sign: Sign!
    than: Float!
}

enum Sign {
    GREATER
    LOWER
    LOWER_THAN_OR_EQUAL
    GREATER_THAN_OR_EQUAL_TO
}

enum OrderType {
    ASC
    DESC
}



